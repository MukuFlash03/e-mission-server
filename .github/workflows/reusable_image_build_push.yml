name: Reusable Docker Image Build and Push

on:
  workflow_call:
    inputs:
      repo:
        required: true
        type: string
      branch:
        required: true
        type: string

env:
  DOCKER_USER: ${{secrets.DOCKER_USER}}
  DOCKER_PASSWORD: ${{secrets.DOCKER_PASSWORD}}

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          repository: MukuFlash03/${{ inputs.repo }}
          ref: ${{ inputs.branch }}
          token: ${{ secrets.GH_FG_PAT_TAGS }}

      - name: Fetch latest repository release tag
        id: fetch-latest-release-tags
        run: |
          response=$(curl -L -H "Accept: application/vnd.github+json" \
              -H "Authorization: Bearer ${{ secrets.GH_FG_PAT_TAGS }}" \
              -H "X-GitHub-Api-Version: 2022-11-28" \
              "https://api.github.com/repos/MukuFlash03/${{ inputs.repo }}/releases/latest")

          tag_name=$(echo "$response" | jq -r '.tag_name')
          target_commitish=$(echo "$response" | jq -r '.target_commitish')
          
          echo "tag_name=$(echo "$response" | jq -r '.tag_name')" >> "$GITHUB_OUTPUT"
          echo "target_commitish=$(echo "$response" | jq -r '.target_commitish')" >> "$GITHUB_OUTPUT"
    
      - name: Fetch latest server image tag
        id: get-server-tag
        # if: ${{ inputs.repo == 'op-admin-dashboard' || inputs.repo == 'em-public-dashboard' }}
        if: ${{ inputs.repo == 'op-admin-dashboard' || inputs.repo == 'em-public-dashboard' || inputs.repo == 'nrel-openpath-join-page'}} 
        run: |
          : << EOF
          response=$(curl -s https://raw.githubusercontent.com/MukuFlash03/e-mission-server/refs/heads/cleanup-cicd/.env)
          SERVER_IMAGE_TAG=$(echo "$response" | grep "SERVER_IMAGE_TAG=" | cut -d'=' -f2)
          echo "SERVER_IMAGE_TAG=$SERVER_IMAGE_TAG" >> "$GITHUB_OUTPUT"
          EOF

          response=$(curl -L -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ secrets.GH_FG_PAT_TAGS }}" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            "https://api.github.com/repos/MukuFlash03/e-mission-server/git/refs/tags")
          # "https://api.github.com/repos/MukuFlash03/e-mission-server/releases/latest")

          # SERVER_IMAGE_TAG=$(echo "$response" | jq -r '.tag_name')
          # SERVER_IMAGE_TARGET=$(echo "$response" | jq -r '.target_commitish')
          
          # echo "SERVER_IMAGE_TAG=$(echo "$response" | jq -r '.tag_name')" >> "$GITHUB_OUTPUT"
          # echo "SERVER_IMAGE_TARGET=$(echo "$response" | jq -r '.target_commitish')" >> "$GITHUB_OUTPUT"

          tags=$(echo "$response" | jq -r '.[].ref' | cut -d'/' -f3)
          latest_tag=$(echo "$tags" | sort -V | tail -n 1)
          previous_tag=$(echo "$tags" | sort -V | tail -n 2 | head -n 1)

          echo "LATEST_SERVER_TAG=$latest_tag" >> "$GITHUB_OUTPUT"
          echo "PREVIOUS_SERVER_TAG=$previous_tag" >> "$GITHUB_OUTPUT"

      - name: Bump up release tag
        # if: ${{ inputs.repo == 'op-admin-dashboard' || inputs.repo == 'em-public-dashboard' }}
        if: ${{ inputs.repo == 'op-admin-dashboard' || inputs.repo == 'em-public-dashboard' || inputs.repo == 'nrel-openpath-join-page'}} 
        id: increment-release-tag
        run: |
          current_server_tag=${{ steps.get-server-tag.outputs.LATEST_SERVER_TAG }}
          previous_server_tag=${{ steps.get-server-tag.outputs.PREVIOUS_SERVER_TAG }}
          echo "Current server tag: $current_server_tag"
          echo "Previous server tag: $previous_server_tag"

          current_server_tag_only=${current_server_tag:1}
          previous_server_tag_only=${previous_server_tag:1}

          echo "Current tag no v: $current_server_tag_only"
          echo "Previous tag no v: $previous_server_tag_only"

          IFS='.' read -r -a current <<< "${current_server_tag_only}"
          IFS='.' read -r -a previous <<< "${previous_server_tag_only}"

          if [[ ${#current[@]} -eq 3 && ${#previous[@]} -eq 3 ]]; then
            if [ "${current[0]}" -gt "${previous[0]}" ]; then
              version_change=major
            elif [ "${current[0]}" -eq "${previous[0]}" ] && [ "${current[1]}" -gt "${previous[1]}" ]; then
              version_change=minor
            elif [ "${current[0]}" -eq "${previous[0]}" ] && [ "${current[1]}" -eq "${previous[1]}" ] && [ "${current[2]}" -gt "${previous[2]}" ]; then
              version_change=patch
            fi
          else
            echo "Version format error"
            exit 1
          fi

          echo "name=version_change::$version_change"

          current_repo_version=${{ steps.fetch-latest-release-tags.outputs.tag_name }}
          current_repo_version_only=${current_repo_version:1}

          IFS='.' read -r -a version_parts <<< "$current_repo_version_only"

          case "$version_change" in
            major)
              version_parts[0]=$((version_parts[0] + 1))
              version_parts[1]=0
              version_parts[2]=0
              ;;
            minor)
              version_parts[1]=$((version_parts[1] + 1))
              version_parts[2]=0
              ;;
            patch)
              version_parts[2]=$((version_parts[2] + 1))
              ;;
          esac

          new_repo_version="v${version_parts[0]}.${version_parts[1]}.${version_parts[2]}"
          echo "new_repo_version::$new_repo_version"
          echo "new_repo_version=$new_repo_version" >> "$GITHUB_OUTPUT"

      - name: Print fetched tags
        run: |
          echo "Current image tag: ${{ steps.fetch-latest-release-tags.outputs.tag_name }} ; target_commit: ${{ steps.fetch-latest-release-tags.outputs.target_commitish }}"
          echo "Incremented image tag: ${{ steps.increment-release-tag.outputs.new_repo_version }}"

      - name: Set docker image tags
        id: set-tags
        run: |
          ls -al
          set -a; source .env; set +a
          if [ "${{ inputs.repo }}" = "e-mission-server" ]; then
            echo "SERVER_IMAGE_TAG=${SERVER_IMAGE_TAG}" >> "$GITHUB_OUTPUT"
          elif [ "${{ inputs.repo }}" = "nrel-openpath-join-page" ]; then
            echo "JOIN_IMAGE_TAG=${JOIN_IMAGE_TAG}" >> "$GITHUB_OUTPUT"
          elif [ "${{ inputs.repo }}" = "op-admin-dashboard" ]; then
            echo "ADMIN_DASH_IMAGE_TAG=${ADMIN_DASH_IMAGE_TAG}" >> "$GITHUB_OUTPUT"
          elif [ "${{ inputs.repo }}" = "em-public-dashboard" ]; then
            echo "PUBLIC_DASH_NOTEBOOK_IMAGE_TAG=${PUBLIC_DASH_NOTEBOOK_IMAGE_TAG}" >> "$GITHUB_OUTPUT"
            echo "PUBLIC_DASH_FRONTEND_IMAGE_TAG=${PUBLIC_DASH_FRONTEND_IMAGE_TAG}" >> "$GITHUB_OUTPUT"
          fi
         
      - name: Print input docker image tags
        run: |
          echo "Event name: ${{ github.event_name }}"
          if [ "${{ inputs.repo }}" = "e-mission-server" ]; then
            echo "Current server image tag: ${{ steps.set-tags.outputs.SERVER_IMAGE_TAG }}"
            echo "Current server image tag version: ${{ steps.get-server-tag.outputs.SERVER_IMAGE_TAG }}"
            echo "Current server image target commitish: ${{ steps.get-server-tag.outputs.SERVER_IMAGE_TARGET }}"
          elif [ "${{ inputs.repo }}" = "nrel-openpath-join-page" ]; then
            echo "Current join-page image tag: ${{ steps.set-tags.outputs.JOIN_IMAGE_TAG }}"
          elif [ "${{ inputs.repo }}" = "op-admin-dashboard" ]; then
            echo "Current admin-dash image tag: ${{ steps.set-tags.outputs.ADMIN_DASH_IMAGE_TAG }}"
            echo "Latest server image tag (${{ github.event_name }}): ${{ steps.get-server-tag.outputs.SERVER_IMAGE_TAG }}"
            echo "Latest server image target commitish: ${{ steps.get-server-tag.outputs.SERVER_IMAGE_TARGET }}"
          elif [ "${{ inputs.repo }}" = "em-public-dashboard" ]; then            
            echo "Current notebook image tag (push): ${{ steps.set-tags.outputs.PUBLIC_DASH_NOTEBOOK_IMAGE_TAG }}"
            echo "Current frontend image tag (push): ${{ steps.set-tags.outputs.PUBLIC_DASH_FRONTEND_IMAGE_TAG }}"
            echo "Latest server image tag (${{ github.event_name }}): ${{ steps.get-server-tag.outputs.SERVER_IMAGE_TAG }}"
            echo "Latest server image target commitish: ${{ steps.get-server-tag.outputs.SERVER_IMAGE_TARGET }}"
          fi

      - name: docker login
        run: |
          docker login -u $DOCKER_USER -p $DOCKER_PASSWORD

      - name: Get current date # get the date of the build
        id: date
        run: echo "date=$(date +'%Y-%m-%d--%M-%S')" >> "$GITHUB_OUTPUT"

      - name: Run a one-line script
        run: echo running image build for repo ${{ inputs.repo }} branch ${{ inputs.branch }} on ${{ steps.date.outputs.date }}

      - name: build docker image
        run: |
          if [ "${{ inputs.repo }}" = "e-mission-server" ]; then
            docker build -t $DOCKER_USER/${{ inputs.repo }}:${{ inputs.branch }}_${{ steps.fetch-latest-release-tags.outputs.tag_name }} .
          elif [ "${{ inputs.repo }}" = "nrel-openpath-join-page" ]; then
            docker build -t $DOCKER_USER/${{ inputs.repo }}:${{ inputs.branch }}_${{ steps.fetch-latest-release-tags.outputs.tag_name }} ./frontend
          elif [ "${{ inputs.repo }}" = "op-admin-dashboard" ]; then
            SERVER_IMAGE_TAG=${{ steps.get-server-tag.outputs.SERVER_IMAGE_TAG }} docker compose -f docker-compose-prod.yml build
          elif [ "${{ inputs.repo }}" = "em-public-dashboard" ]; then            
            SERVER_IMAGE_TAG=${{ steps.get-server-tag.outputs.SERVER_IMAGE_TAG }} docker compose -f docker-compose.yml build
          fi
          docker images

      - name: rename docker image
        run: |
          if [ "${{ inputs.repo }}" = "op-admin-dashboard" ]; then
            if [ "${{ github.event_name }}" == "push" ]; then
              docker image tag e-mission/opdash:0.0.1 $DOCKER_USER/${{ inputs.repo }}:${{ inputs.branch }}_${{ steps.fetch-latest-release-tags.outputs.tag_name }}
            elif [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
              docker image tag e-mission/opdash:0.0.1 $DOCKER_USER/${{ inputs.repo }}:${{ inputs.branch }}_${{ steps.increment-release-tag.outputs.new_repo_version }}
            fi
          elif [ "${{ inputs.repo }}" = "em-public-dashboard" ]; then      
            if [ "${{ github.event_name }}" == "push" ]; then
              docker image tag em-pub-dash-prod/frontend:latest $DOCKER_USER/${{ inputs.repo }}_frontend:${{ inputs.branch }}_${{ steps.fetch-latest-release-tags.outputs.tag_name }}
              docker image tag em-pub-dash-prod/viz-scripts:latest $DOCKER_USER/${{ inputs.repo }}_notebook:${{ inputs.branch }}_${{ steps.fetch-latest-release-tags.outputs.tag_name }}
            elif [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
              docker image tag em-pub-dash-prod/viz-scripts:latest $DOCKER_USER/${{ inputs.repo }}_notebook:${{ inputs.branch }}_${{ steps.increment-release-tag.outputs.new_repo_version }}
            fi
          fi
  
      - name: push docker image
        run: |
          if [ "${{ inputs.repo }}" = "em-public-dashboard" ]; then      
            if [ "${{ github.event_name }}" == "push" ]; then
              docker push $DOCKER_USER/${{ inputs.repo }}_frontend:${{ inputs.branch }}_${{ steps.fetch-latest-release-tags.outputs.tag_name }}
              docker push $DOCKER_USER/${{ inputs.repo }}_notebook:${{ inputs.branch }}_${{ steps.fetch-latest-release-tags.outputs.tag_name }}
            elif [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
              docker push $DOCKER_USER/${{ inputs.repo }}_notebook:${{ inputs.branch }}_${{ steps.increment-release-tag.outputs.new_repo_version }}
            fi
          elif [ "${{ inputs.repo }}" = "op-admin-dashboard" ] || [ "${{ inputs.repo }}" = "nrel-openpath-join-page" ]; then
            if [ "${{ github.event_name }}" == "push" ]; then
              docker push $DOCKER_USER/${{ inputs.repo }}:${{ inputs.branch }}_${{ steps.fetch-latest-release-tags.outputs.tag_name }}
            elif [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
              docker push $DOCKER_USER/${{ inputs.repo }}:${{ inputs.branch }}_${{ steps.increment-release-tag.outputs.new_repo_version }}
            fi
          else
            docker push $DOCKER_USER/${{ inputs.repo }}:${{ inputs.branch }}_${{ steps.fetch-latest-release-tags.outputs.tag_name }}
          fi
        
      - name: Update .env file 
        run: |
          if [ "${{ inputs.repo }}" = "e-mission-server" ]; then
            echo "SERVER_IMAGE_TAG=${{ inputs.branch }}_${{ steps.fetch-latest-release-tags.outputs.tag_name }}" > .env
          elif [ "${{ inputs.repo }}" = "nrel-openpath-join-page" ]; then
            if [ "${{ github.event_name }}" == "push" ]; then
              echo "JOIN_IMAGE_TAG=${{ inputs.branch }}_${{ steps.fetch-latest-release-tags.outputs.tag_name }}" > .env
            elif [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
              echo "JOIN_IMAGE_TAG=${{ inputs.branch }}_${{ steps.increment-release-tag.outputs.new_repo_version }}" > .env
            fi
          elif [ "${{ inputs.repo }}" = "op-admin-dashboard" ]; then
            if [ "${{ github.event_name }}" == "push" ]; then
              echo "ADMIN_DASH_IMAGE_TAG=${{ inputs.branch }}_${{ steps.fetch-latest-release-tags.outputs.tag_name }}" > .env
            elif [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
              echo "ADMIN_DASH_IMAGE_TAG=${{ inputs.branch }}_${{ steps.increment-release-tag.outputs.new_repo_version }}" > .env
            fi
            echo "SERVER_IMAGE_TAG=${{ steps.get-server-tag.outputs.SERVER_IMAGE_TAG }}" >> .env
          elif [ "${{ inputs.repo }}" = "em-public-dashboard" ]; then
            if [ "${{ github.event_name }}" == "push" ]; then
              echo "Push event: Update frontend image tag"
              echo "PUBLIC_DASH_NOTEBOOK_IMAGE_TAG=${{ inputs.branch }}_${{ steps.fetch-latest-release-tags.outputs.tag_name }}" > .env
              echo "PUBLIC_DASH_FRONTEND_IMAGE_TAG=${{ inputs.branch }}_${{ steps.fetch-latest-release-tags.outputs.tag_name }}" >> .env
            elif [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
              echo "Workflow_dispatch: Reuse existing frontend image tag"
              echo "PUBLIC_DASH_NOTEBOOK_IMAGE_TAG=${{ inputs.branch }}_${{ steps.increment-release-tag.outputs.new_repo_version }}" > .env
              echo "PUBLIC_DASH_FRONTEND_IMAGE_TAG=${{ steps.set-tags.outputs.PUBLIC_DASH_FRONTEND_IMAGE_TAG }}" >> .env
            fi
            echo "SERVER_IMAGE_TAG=${{ steps.get-server-tag.outputs.SERVER_IMAGE_TAG }}" >> .env
          fi
          cat .env

      - name: Add, Commit, Push changes to .env file
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "Github Actions bot to update .env with latest tags"
          if git diff --quiet; then
            echo "Latest timestamp already present in .env file, no changes to commit"
          else
            git add .env
            git commit -m "Updated docker image tags in .env file to the latest timestamp"
            git push origin
          fi
          cat .env
